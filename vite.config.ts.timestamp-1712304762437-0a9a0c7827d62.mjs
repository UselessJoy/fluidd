// vite.config.ts
import { defineConfig } from "file:///C:/project/gelios-fluidd/node_modules/vite/dist/node/index.js";
import vue from "file:///C:/project/gelios-fluidd/node_modules/@vitejs/plugin-vue2/dist/index.mjs";
import { VitePWA } from "file:///C:/project/gelios-fluidd/node_modules/vite-plugin-pwa/dist/index.js";
import Components from "file:///C:/project/gelios-fluidd/node_modules/unplugin-vue-components/dist/vite.js";
import { VuetifyResolver } from "file:///C:/project/gelios-fluidd/node_modules/unplugin-vue-components/dist/resolvers.js";
import path2 from "path";
import content from "file:///C:/project/gelios-fluidd/node_modules/@originjs/vite-plugin-content/dist/mjs/index.js";
import monacoEditorPluginModule from "file:///C:/project/gelios-fluidd/node_modules/vite-plugin-monaco-editor/dist/index.js";
import checker from "file:///C:/project/gelios-fluidd/node_modules/vite-plugin-checker/dist/esm/main.js";

// vite.config.inject-version.ts
import child_process from "child_process";
import fs from "fs";
import path from "path";

// package.json
var version = "0.5.0";

// vite.config.inject-version.ts
var __vite_injected_original_dirname = "C:\\project\\gelios-fluidd";
var writeVersionFile = async () => {
  const versionFile = await fs.promises.open(path.resolve(__vite_injected_original_dirname, "dist/.version"), "w");
  await versionFile.writeFile(`v${version}`);
  await versionFile.close();
};
var writeReleaseInfoFile = async () => {
  const releaseInfoFile = await fs.promises.open(path.resolve(__vite_injected_original_dirname, "dist/release_info.json"), "w");
  await releaseInfoFile.writeFile(JSON.stringify({
    project_name: "fluidd",
    project_owner: "UselessJoy",
    version: `v${version}`
  }));
  await releaseInfoFile.close();
};
var vitePluginInjectVersion = () => {
  return {
    name: "version",
    config: () => {
      const git_hash = child_process.execSync("git rev-parse --short HEAD").toString();
      return {
        define: {
          "import.meta.env.VERSION": JSON.stringify(version),
          "import.meta.env.HASH": JSON.stringify(git_hash)
        }
      };
    },
    writeBundle: () => {
      setImmediate(async () => {
        await writeVersionFile();
        await writeReleaseInfoFile();
      });
    }
  };
};
var vite_config_inject_version_default = vitePluginInjectVersion;

// vite.config.ts
import { pathToFileURL } from "node:url";
var __vite_injected_original_dirname2 = "C:\\project\\gelios-fluidd";
var isObjectWithDefaultFunction = (module) => module != null && typeof module === "object" && "default" in module && typeof module.default === "function";
pathToFileURL("/tmp/text.txt");
var monacoEditorPlugin = isObjectWithDefaultFunction(monacoEditorPluginModule) ? monacoEditorPluginModule.default : monacoEditorPluginModule;
var vite_config_default = defineConfig({
  plugins: [
    VitePWA({
      srcDir: "src",
      filename: "sw.ts",
      strategies: "injectManifest",
      includeAssets: [
        "**/*.svg",
        "**/*.png",
        "**/*.ico",
        "editor.theme.json"
      ],
      injectManifest: {
        globPatterns: [
          "**/*.{js,css,html,ttf,woff,woff2,wasm}"
        ],
        maximumFileSizeToCacheInBytes: 4 * 1024 ** 2
      },
      manifest: {
        name: "fluidd",
        short_name: "fluidd",
        description: "The Klipper web interface for managing your 3d printer",
        theme_color: "#2196F3",
        background_color: "#000000",
        icons: [
          {
            src: "img/icons/android-chrome-192x192.png",
            sizes: "192x192",
            type: "image/png"
          },
          {
            src: "img/icons/android-chrome-512x512.png",
            sizes: "512x512",
            type: "image/png"
          },
          {
            src: "img/icons/android-chrome-maskable-192x192.png",
            sizes: "192x192",
            type: "image/png",
            purpose: "maskable"
          },
          {
            src: "img/icons/android-chrome-maskable-512x512.png",
            sizes: "512x512",
            type: "image/png",
            purpose: "maskable"
          }
        ],
        shortcuts: [
          {
            name: "Configuration",
            url: "#/configure",
            icons: [
              {
                src: "img/icons/shortcut-configuration-96x96.png",
                sizes: "96x96",
                type: "image/png"
              }
            ]
          },
          {
            name: "Settings",
            url: "#/settings",
            icons: [
              {
                src: "img/icons/shortcut-settings-96x96.png",
                sizes: "96x96",
                type: "image/png"
              }
            ]
          }
        ]
      },
      devOptions: {
        enabled: true,
        type: "module",
        navigateFallback: "index.html"
      }
    }),
    vue(),
    vite_config_inject_version_default(),
    content(),
    monacoEditorPlugin({
      languageWorkers: ["editorWorkerService", "json", "css"]
    }),
    checker({
      vueTsc: {
        tsconfigPath: path2.resolve(__vite_injected_original_dirname2, "./tsconfig.app.json")
      }
    }),
    Components({
      dts: true,
      dirs: [
        "src/components/common",
        "src/components/layout",
        "src/components/ui"
      ],
      resolvers: [
        VuetifyResolver()
      ]
    })
  ],
  css: {
    preprocessorOptions: {
      css: { charset: false },
      scss: {
        additionalData: '@import "@/scss/variables";\n'
      },
      sass: {
        additionalData: '@import "@/scss/variables.scss"\n'
      }
    }
  },
  envPrefix: "VUE_",
  resolve: {
    alias: {
      "@": path2.resolve(__vite_injected_original_dirname2, "./src")
    }
  },
  test: {
    globals: true,
    environment: "jsdom",
    setupFiles: [
      "./tests/unit/setup.ts"
    ],
    alias: [
      { find: /^vue$/, replacement: "vue/dist/vue.runtime.common.js" }
    ]
  },
  base: "./",
  server: {
    host: "0.0.0.0",
    port: 8080
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
